{"ast":null,"code":"import { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/router\";\nexport let PresenceService = /*#__PURE__*/(() => {\n  class PresenceService {\n    constructor(toastr, router) {\n      this.toastr = toastr;\n      this.router = router;\n      this.hubUrl = environment.hubUrl;\n      this.onlineUsersSource = new BehaviorSubject([]);\n      this.onlineUsers$ = this.onlineUsersSource.asObservable();\n    }\n\n    createHubConnection(user) {\n      this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'presence', {\n        accessTokenFactory: () => user.token\n      }).withAutomaticReconnect().build();\n      this.hubConnection.start().catch(error => console.log(error));\n      this.hubConnection.on('UserIsOnline', username => {\n        this.onlineUsers$.pipe(take(1)).subscribe(usernames => {\n          this.onlineUsersSource.next([...usernames, username]);\n        });\n      });\n      this.hubConnection.on('UserIsOffline', username => {\n        this.onlineUsers$.pipe(take(1)).subscribe(usernames => {\n          this.onlineUsersSource.next([...usernames.filter(x => x !== username)]);\n        });\n      });\n      this.hubConnection.on('GetOnlineUsers', usernames => {\n        this.onlineUsersSource.next(usernames);\n      });\n      this.hubConnection.on('NewMessageReceived', ({\n        username,\n        knownAs\n      }) => {\n        this.toastr.info(knownAs + ' has sent you a new message!').onTap.pipe(take(1)).subscribe(() => this.router.navigateByUrl('/members/' + username + '?tab=3'));\n      });\n    }\n\n    stopHubConnection() {\n      this.hubConnection.stop().catch(error => console.log(error));\n    }\n\n  }\n\n  PresenceService.ɵfac = function PresenceService_Factory(t) {\n    return new (t || PresenceService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.Router));\n  };\n\n  PresenceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PresenceService,\n    factory: PresenceService.ɵfac,\n    providedIn: 'root'\n  });\n  return PresenceService;\n})();","map":null,"metadata":{},"sourceType":"module"}