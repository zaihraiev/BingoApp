{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Angular\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.hubUrl = environment.hubUrl;\n      this.messageThreadSource = new BehaviorSubject([]);\n      this.messageThread$ = this.messageThreadSource.asObservable();\n    }\n\n    createHubConnection(user, otherUsername) {\n      this.hubConenction = new HubConnectionBuilder().withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n        accessTokenFactory: () => user.token\n      }).withAutomaticReconnect().build();\n      this.hubConenction.start().catch(error => console.log(error));\n      this.hubConenction.on('ReceiveMessageThread', messages => {\n        this.messageThreadSource.next(messages);\n      });\n      this.hubConenction.on('NewMessage', message => {\n        this.messageThread$.pipe(take(1)).subscribe(messages => {\n          this.messageThreadSource.next([...messages, message]);\n        });\n      });\n      this.hubConenction.on('UpdatedGroup', group => {\n        if (group.connections.some(x => x.username === otherUsername)) {\n          this.messageThread$.pipe(take(1)).subscribe(messages => {\n            messages.forEach(message => {\n              if (!message.dateRead) {\n                message.dateRead = new Date(Date.now());\n              }\n            });\n            this.messageThreadSource.next([...messages]);\n          });\n        }\n      });\n    }\n\n    stopHubConnection() {\n      if (this.hubConenction) {\n        this.hubConenction.stop();\n      }\n    }\n\n    getMessages(pageNumber, pageSize, container) {\n      let params = getPaginationHeaders(pageNumber, pageSize);\n      params = params.append('Container', container);\n      return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n    }\n\n    getMessageThread(username) {\n      return this.http.get(this.baseUrl + 'messages/thread/' + username);\n    }\n\n    sendMessage(username, content) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        return _this.hubConenction.invoke('SendMessage', {\n          recipientUsername: username,\n          content\n        }).catch(error => console.log(error));\n      })();\n    }\n\n    deleteMessage(id) {\n      return this.http.delete(this.baseUrl + 'messages/' + id);\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}