{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, toastr) {\n      this.router = router;\n      this.toastr = toastr;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(error => {\n        if (error) {\n          switch (error.status) {\n            case 400:\n              if (error.error.errors) {\n                const modalStateErrors = [];\n\n                for (const key in error.error.errors) {\n                  if (error.error.errors[key]) {\n                    modalStateErrors.push(error.error.errors[key]);\n                  }\n                }\n\n                throw modalStateErrors.flat();\n              } else if (typeof error.error === 'object') {\n                this.toastr.error(error.statusText, error.status);\n              } else {\n                this.toastr.error(error.error, error.status);\n              }\n\n              break;\n\n            case 401:\n              this.toastr.error(error.statusText, error.status);\n              break;\n\n            case 404:\n              this.router.navigateByUrl('/not-found');\n              break;\n\n            case 500:\n              const navigationExtras = {\n                state: {\n                  error: error.error\n                }\n              };\n              this.router.navigateByUrl('/server-error', navigationExtras);\n              break;\n\n            default:\n              this.toastr.error(\"Something unexpected went wrong\");\n              console.log(error);\n              break;\n          }\n        }\n\n        return throwError(() => new Error(error));\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}